
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ArithParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ArithParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ArithParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ArithParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\037\002" +
    "\000\002\004\005\000\002\004\003\000\002\004\003\000" +
    "\002\007\012\000\002\007\013\000\002\010\005\000\002" +
    "\010\003\000\002\011\003\000\002\011\003\000\002\005" +
    "\006\000\002\005\005\000\002\006\005\000\002\012\005" +
    "\000\002\012\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\006\000\002\030\011\000\002\030\007\000\002" +
    "\030\010\000\002\030\014\000\002\020\003\000\002\020" +
    "\003\000\002\023\004\000\002\023\003\000\002\024\005" +
    "\000\002\024\003\000\002\024\003\000\002\025\005\000" +
    "\002\025\003\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\003\000\002\015\005\000\002\015\003" +
    "\000\002\026\005\000\002\026\005\000\002\026\003\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\003\000\002\032\003\000\002\032\005\000\002\032" +
    "\003\000\002\032\003\000\002\035\002\000\002\036\002" +
    "\000\002\034\002\000\002\022\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\022\004\030\005\012\007\uffc7\030\007\031" +
    "\uffc7\033\011\036\005\037\026\001\002\000\026\002\ufff9" +
    "\004\ufff9\005\ufff9\007\ufff9\011\ufff9\030\ufff9\031\ufff9\033" +
    "\ufff9\036\ufff9\037\ufff9\001\002\000\050\006\uffcd\007\uffcd" +
    "\011\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\031\uffcd\032\uffcd\034\uffcd\035\uffcd\001\002\000\026\002" +
    "\ufffd\004\ufffd\005\ufffd\007\ufffd\011\ufffd\030\ufffd\031\ufffd" +
    "\033\ufffd\036\ufffd\037\ufffd\001\002\000\012\005\012\030" +
    "\007\036\005\037\043\001\002\000\006\007\ufffc\031\102" +
    "\001\002\000\016\005\012\030\007\031\uffc7\034\uffc7\036" +
    "\005\037\043\001\002\000\016\005\012\006\uffc7\030\007" +
    "\031\uffc7\036\005\037\043\001\002\000\004\002\120\001" +
    "\002\000\016\006\uffe0\007\uffe0\011\uffe0\031\uffe0\034\uffe0" +
    "\035\uffe0\001\002\000\020\006\uffde\007\uffde\011\uffde\031" +
    "\uffde\032\uffde\034\uffde\035\uffde\001\002\000\020\006\uffe1" +
    "\007\uffe1\011\uffe1\031\uffe1\032\105\034\uffe1\035\uffe1\001" +
    "\002\000\042\006\uffd7\007\uffd7\011\uffd7\013\uffd7\014\062" +
    "\015\063\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\031\uffd7\032\uffd7\034\uffd7\035\uffd7\001\002\000\050" +
    "\006\uffcb\007\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\031\uffcb\032\uffcb\034\uffcb\035\uffcb\001" +
    "\002\000\050\006\uffce\007\uffce\011\uffce\013\uffce\014\uffce" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\022\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\027\uffce\031\uffce\032\uffce\034\uffce" +
    "\035\uffce\001\002\000\050\006\uffd2\007\uffd2\011\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\016\066\017\067\020\065\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\031\uffd2\032" +
    "\uffd2\034\uffd2\035\uffd2\001\002\000\034\006\uffe3\007\uffe3" +
    "\011\uffe3\022\060\023\054\024\056\025\053\026\055\027" +
    "\057\031\uffe3\032\uffe3\034\uffe3\035\uffe3\001\002\000\026" +
    "\002\ufffa\004\ufffa\005\ufffa\007\ufffa\011\ufffa\030\ufffa\031" +
    "\ufffa\033\ufffa\036\ufffa\037\ufffa\001\002\000\026\002\ufffe" +
    "\004\ufffe\005\ufffe\007\ufffe\011\ufffe\030\ufffe\031\ufffe\033" +
    "\ufffe\036\ufffe\037\ufffe\001\002\000\042\005\044\007\uffca" +
    "\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\114\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\031\uffca" +
    "\032\uffca\001\002\000\024\002\001\004\030\005\012\007" +
    "\uffc7\030\007\031\uffc7\033\011\036\005\037\026\001\002" +
    "\000\004\037\031\001\002\000\004\005\032\001\002\000" +
    "\006\006\uffc8\037\033\001\002\000\006\006\ufff5\013\ufff5" +
    "\001\002\000\004\006\ufff3\001\002\000\006\006\ufff4\013" +
    "\112\001\002\000\004\006\037\001\002\000\004\012\040" +
    "\001\002\000\020\005\012\007\uffc7\010\041\030\007\031" +
    "\uffc7\036\005\037\043\001\002\000\022\004\030\005\012" +
    "\007\uffc7\030\007\031\uffc7\033\011\036\005\037\026\001" +
    "\002\000\006\007\103\031\102\001\002\000\052\005\044" +
    "\006\uffca\007\uffca\011\uffca\013\uffca\014\uffca\015\uffca\016" +
    "\uffca\017\uffca\020\uffca\022\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\031\uffca\032\uffca\034\uffca\035\uffca\001" +
    "\002\000\012\005\012\006\uffc9\036\005\037\043\001\002" +
    "\000\004\006\101\001\002\000\022\006\uffee\013\uffee\022" +
    "\060\023\054\024\056\025\053\026\055\027\057\001\002" +
    "\000\004\006\uffec\001\002\000\006\006\uffed\013\051\001" +
    "\002\000\010\005\012\036\005\037\043\001\002\000\022" +
    "\006\uffef\013\uffef\022\060\023\054\024\056\025\053\026" +
    "\055\027\057\001\002\000\010\005\012\036\005\037\043" +
    "\001\002\000\010\005\012\036\005\037\043\001\002\000" +
    "\010\005\012\036\005\037\043\001\002\000\010\005\012" +
    "\036\005\037\043\001\002\000\010\005\012\036\005\037" +
    "\043\001\002\000\010\005\012\036\005\037\043\001\002" +
    "\000\042\006\uffdb\007\uffdb\011\uffdb\013\uffdb\014\062\015" +
    "\063\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\031\uffdb\032\uffdb\034\uffdb\035\uffdb\001\002\000\010\005" +
    "\012\036\005\037\043\001\002\000\010\005\012\036\005" +
    "\037\043\001\002\000\050\006\uffd3\007\uffd3\011\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\066\017\067\020\065\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\031\uffd3\032" +
    "\uffd3\034\uffd3\035\uffd3\001\002\000\010\005\012\036\005" +
    "\037\043\001\002\000\010\005\012\036\005\037\043\001" +
    "\002\000\010\005\012\036\005\037\043\001\002\000\050" +
    "\006\uffd0\007\uffd0\011\uffd0\013\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\031\uffd0\032\uffd0\034\uffd0\035\uffd0\001" +
    "\002\000\050\006\uffd1\007\uffd1\011\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\020\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\031\uffd1\032\uffd1\034\uffd1" +
    "\035\uffd1\001\002\000\050\006\uffcf\007\uffcf\011\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\031\uffcf\032" +
    "\uffcf\034\uffcf\035\uffcf\001\002\000\050\006\uffd4\007\uffd4" +
    "\011\uffd4\013\uffd4\014\uffd4\015\uffd4\016\066\017\067\020" +
    "\065\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\031\uffd4\032\uffd4\034\uffd4\035\uffd4\001\002\000\042\006" +
    "\uffd8\007\uffd8\011\uffd8\013\uffd8\014\062\015\063\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\031\uffd8\032" +
    "\uffd8\034\uffd8\035\uffd8\001\002\000\042\006\uffdd\007\uffdd" +
    "\011\uffdd\013\uffdd\014\062\015\063\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\031\uffdd\032\uffdd\034\uffdd" +
    "\035\uffdd\001\002\000\042\006\uffd9\007\uffd9\011\uffd9\013" +
    "\uffd9\014\062\015\063\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\031\uffd9\032\uffd9\034\uffd9\035\uffd9\001" +
    "\002\000\042\006\uffda\007\uffda\011\uffda\013\uffda\014\062" +
    "\015\063\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027" +
    "\uffda\031\uffda\032\uffda\034\uffda\035\uffda\001\002\000\042" +
    "\006\uffdc\007\uffdc\011\uffdc\013\uffdc\014\062\015\063\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\031\uffdc" +
    "\032\uffdc\034\uffdc\035\uffdc\001\002\000\050\006\uffeb\007" +
    "\uffeb\011\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\031\uffeb\032\uffeb\034\uffeb\035\uffeb\001\002\000\012" +
    "\005\012\030\007\036\005\037\043\001\002\000\026\002" +
    "\ufff8\004\ufff8\005\ufff8\007\ufff8\011\ufff8\030\ufff8\031\ufff8" +
    "\033\ufff8\036\ufff8\037\ufff8\001\002\000\020\006\uffe2\007" +
    "\uffe2\011\uffe2\031\uffe2\032\105\034\uffe2\035\uffe2\001\002" +
    "\000\012\005\012\030\007\036\005\037\043\001\002\000" +
    "\020\006\uffdf\007\uffdf\011\uffdf\031\uffdf\032\uffdf\034\uffdf" +
    "\035\uffdf\001\002\000\024\004\030\005\012\007\uffc7\011" +
    "\110\030\007\031\uffc7\033\011\036\005\037\026\001\002" +
    "\000\026\002\ufff7\004\ufff7\005\ufff7\007\ufff7\011\ufff7\030" +
    "\ufff7\031\ufff7\033\ufff7\036\ufff7\037\ufff7\001\002\000\026" +
    "\002\uffff\004\uffff\005\uffff\007\uffff\011\uffff\030\uffff\031" +
    "\uffff\033\uffff\036\uffff\037\uffff\001\002\000\004\037\113" +
    "\001\002\000\006\006\ufff6\013\ufff6\001\002\000\012\005" +
    "\012\033\011\036\005\037\043\001\002\000\020\007\117" +
    "\022\060\023\054\024\056\025\053\026\055\027\057\001" +
    "\002\000\026\002\ufff1\004\ufff1\005\ufff1\007\ufff1\011\ufff1" +
    "\030\ufff1\031\ufff1\033\ufff1\036\ufff1\037\ufff1\001\002\000" +
    "\026\002\ufff2\004\ufff2\005\ufff2\007\ufff2\011\ufff2\030\ufff2" +
    "\031\ufff2\033\ufff2\036\ufff2\037\ufff2\001\002\000\004\002" +
    "\000\001\002\000\006\006\122\031\102\001\002\000\050" +
    "\006\uffcc\007\uffcc\011\uffcc\013\uffcc\014\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\031\uffcc\032\uffcc\034\uffcc\035\uffcc\001" +
    "\002\000\006\031\102\034\124\001\002\000\022\005\012" +
    "\007\uffc7\010\125\030\007\031\uffc7\035\uffc7\036\005\037" +
    "\127\001\002\000\022\004\030\005\012\007\uffc7\030\007" +
    "\031\uffc7\033\011\036\005\037\026\001\002\000\010\007" +
    "\uffe6\031\102\035\uffe6\001\002\000\044\005\044\007\uffca" +
    "\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\136\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\031\uffca" +
    "\032\uffca\035\uffca\001\002\000\006\007\133\035\132\001" +
    "\002\000\006\007\uffe5\035\uffe5\001\002\000\016\005\012" +
    "\007\uffc7\030\007\031\uffc7\036\005\037\127\001\002\000" +
    "\026\002\uffe9\004\uffe9\005\uffe9\007\uffe9\011\uffe9\030\uffe9" +
    "\031\uffe9\033\uffe9\036\uffe9\037\uffe9\001\002\000\004\007" +
    "\135\001\002\000\026\002\uffea\004\uffea\005\uffea\007\uffea" +
    "\011\uffea\030\uffea\031\uffea\033\uffea\036\uffea\037\uffea\001" +
    "\002\000\010\005\012\036\005\037\043\001\002\000\022" +
    "\007\ufff0\022\060\023\054\024\056\025\053\026\055\027" +
    "\057\035\ufff0\001\002\000\024\004\030\005\012\007\uffc7" +
    "\011\141\030\007\031\uffc7\033\011\036\005\037\026\001" +
    "\002\000\030\002\uffe8\004\uffe8\005\uffe8\007\uffe8\011\uffe8" +
    "\030\uffe8\031\uffe8\033\uffe8\035\142\036\uffe8\037\uffe8\001" +
    "\002\000\004\010\143\001\002\000\016\005\012\011\uffc7" +
    "\030\007\031\uffc7\036\005\037\043\001\002\000\006\011" +
    "\145\031\102\001\002\000\026\002\uffe7\004\uffe7\005\uffe7" +
    "\007\uffe7\011\uffe7\030\uffe7\031\uffe7\033\uffe7\036\uffe7\037" +
    "\uffe7\001\002\000\004\007\147\001\002\000\026\002\ufffb" +
    "\004\ufffb\005\ufffb\007\ufffb\011\ufffb\030\ufffb\031\ufffb\033" +
    "\ufffb\036\ufffb\037\ufffb\001\002\000\020\006\uffe4\007\uffe4" +
    "\011\uffe4\031\uffe4\032\uffe4\034\uffe4\035\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\040\002\012\003\026\004\024\005\005\007" +
    "\003\014\017\023\014\024\007\025\015\026\016\027\022" +
    "\030\023\031\021\032\020\034\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\017" +
    "\023\147\026\016\027\022\031\021\032\020\001\001\000" +
    "\004\037\145\001\001\000\024\014\017\023\014\024\122" +
    "\025\015\026\016\027\022\031\021\032\020\034\013\001" +
    "\001\000\024\014\017\023\014\024\120\025\015\026\016" +
    "\027\022\031\021\032\020\034\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\110\005\005\007" +
    "\003\014\017\023\014\024\007\025\015\026\016\027\022" +
    "\030\023\031\021\032\020\034\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\034\011\035\036\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\014\017" +
    "\023\014\024\041\025\015\026\016\027\022\031\021\032" +
    "\020\034\013\001\001\000\036\003\106\004\024\005\005" +
    "\007\003\014\017\023\014\024\007\025\015\026\016\027" +
    "\022\030\023\031\021\032\020\034\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\012\047\013\044\014" +
    "\017\026\016\027\045\031\021\032\020\035\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\017\026\016\027\051\031\021" +
    "\032\020\001\001\000\002\001\001\000\012\014\017\026" +
    "\077\031\021\032\020\001\001\000\012\014\017\026\076" +
    "\031\021\032\020\001\001\000\012\014\017\026\075\031" +
    "\021\032\020\001\001\000\012\014\017\026\074\031\021" +
    "\032\020\001\001\000\012\014\017\026\073\031\021\032" +
    "\020\001\001\000\012\014\017\026\060\031\021\032\020" +
    "\001\001\000\002\001\001\000\010\014\017\031\072\032" +
    "\020\001\001\000\010\014\017\031\063\032\020\001\001" +
    "\000\002\001\001\000\006\014\017\032\071\001\001\000" +
    "\006\014\017\032\070\001\001\000\006\014\017\032\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\014\017\023\014\025\103\026\016" +
    "\027\022\031\021\032\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\014\017\023\105\026\016\027\022" +
    "\031\021\032\020\001\001\000\002\001\001\000\034\004" +
    "\110\005\005\007\003\014\017\023\014\024\007\025\015" +
    "\026\016\027\022\030\023\031\021\032\020\034\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\014\017\026\016\027\114\030" +
    "\115\031\021\032\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\006\130" +
    "\014\017\020\127\023\014\024\125\025\015\026\016\027" +
    "\022\031\021\032\020\034\013\001\001\000\036\003\137" +
    "\004\024\005\005\007\003\014\017\023\014\024\007\025" +
    "\015\026\016\027\022\030\023\031\021\032\020\034\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\006\130\014\017\020\133" +
    "\023\014\024\125\025\015\026\016\027\022\031\021\032" +
    "\020\034\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\014\017\026\016\027\136\031" +
    "\021\032\020\001\001\000\002\001\001\000\034\004\110" +
    "\005\005\007\003\014\017\023\014\024\007\025\015\026" +
    "\016\027\022\030\023\031\021\032\020\034\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\014\017\023" +
    "\014\024\143\025\015\026\016\027\022\031\021\032\020" +
    "\034\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ArithParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ArithParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ArithParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getChar() +
				       ": Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		Lexer lexer;

		public ArithParser(Lexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ArithParser$actions {
  private final ArithParser parser;

  /** Constructor */
  CUP$ArithParser$actions(ArithParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ArithParser$do_action_part00000000(
    int                        CUP$ArithParser$act_num,
    java_cup.runtime.lr_parser CUP$ArithParser$parser,
    java.util.Stack            CUP$ArithParser$stack,
    int                        CUP$ArithParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ArithParser$result;

      /* select the action based on the action number */
      switch (CUP$ArithParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ArithProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ArithProgram(s); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArithProgram start_val = (ArithProgram)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = start_val;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ArithParser$parser.done_parsing();
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = d; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
 RESULT = new Statement(a); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("NT$0",29, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= And NT$0 SEMI 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;

              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= conditionalExpression 
            {
              Statement RESULT =null;
		int conditionalleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int conditionalright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp conditional = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new Statement(conditional); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= funDefn 
            {
              Statement RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtFunDefn func = (StmtFunDefn)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = func; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funDefn ::= FUN VAR LPAREN paramListE RPAREN DEFINE And SEMI 
            {
              StmtFunDefn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new StmtFunDefn(v,p,new StmtSequence(new Statement(a))); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("funDefn",5, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-7)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funDefn ::= FUN VAR LPAREN paramListE RPAREN DEFINE LBRACE stmtList RBRACE 
            {
              StmtFunDefn RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-7)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-7)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).right;
		ArrayList<String> parameters = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtSequence statements = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new StmtFunDefn(var, parameters, statements); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("funDefn",5, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-8)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // paramList ::= paramList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int pListleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<String> pList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
	pList.add(var);
	RESULT = pList; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramList",6, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // paramList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
	ArrayList<String> result = new ArrayList<String>();
	result.add(var);
	RESULT = result;
	
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramList",6, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ArrayList<String> paramList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = paramList; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramListE",7, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramListE ::= emptyS 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ArrayList<String> e = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramListE",7, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // definition ::= VAR ASSIGN comparisonExpression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // definition ::= VAR ASSIGN conditionalExpression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ifdefn ::= VAR ASSIGN comparisonExpression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifdefn",4, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // args ::= args COMMA comparisonExpression 
            {
              ArrayList<Exp> RESULT =null;
		int aListleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<Exp> aList = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 // a < b < c < d =>a,b and b,c and c,d
	aList.add(e);
	RESULT = aList; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("args",8, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // args ::= comparisonExpression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
	ArrayList<Exp> result = new ArrayList<>();
	result.add(e);
	RESULT = result;
	 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("args",8, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // argsE ::= args 
            {
              ArrayList<Exp> RESULT =null;
		int aListleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int aListright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ArrayList<Exp> aList = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = aList; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argsE",9, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // argsE ::= emptyA 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ArrayList<Exp> e = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argsE",9, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funcall ::= VAR LPAREN argsE RPAREN 
            {
              ExpFunCall RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int argumentsleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int argumentsright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> arguments = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpFunCall(name, arguments); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("funcall",10, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // conditionalExpression ::= IF And THEN ifstmt ELSE ifstmt SEMI 
            {
              Exp RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).right;
		Exp pred = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).value;
		int consqleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int consqright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Statement consq = (Statement)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int altleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int altright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Statement alt = (Statement)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = new ExpConditional(pred, new StmtSequence(consq), new StmtSequence(alt)); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("conditionalExpression",22, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // conditionalExpression ::= IF And THEN ifstmt SEMI 
            {
              Exp RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp pred = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int consqleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int consqright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Statement consq = (Statement)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = new ExpConditional(pred,new StmtSequence(consq));
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("conditionalExpression",22, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // conditionalExpression ::= IF And THEN LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		Exp pred = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int consqleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int consqright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtSequence consq = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = new ExpConditional(pred,consq);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("conditionalExpression",22, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // conditionalExpression ::= IF And THEN LBRACE stmtList RBRACE ELSE LBRACE And RBRACE 
            {
              Exp RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-8)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-8)).right;
		Exp pred = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-8)).value;
		int consqleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).left;
		int consqright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).right;
		StmtSequence consq = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).value;
		int altleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int altright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp alt = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = new ExpConditional(pred, new StmtSequence( new Statement(consq)), new StmtSequence( new Statement(alt))); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("conditionalExpression",22, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-9)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ifstmt ::= And 
            {
              Statement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new Statement(exp); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifstmt",14, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ifstmt ::= ifdefn 
            {
              Statement RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtDefinition exp = (StmtDefinition)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = exp; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("ifstmt",14, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Not ::= NOT Not 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpNot(n); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("Not",17, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Not ::= comparisonExpression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = e;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("Not",17, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // And ::= And AND Or 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		  RESULT = new ExpAnd(a,r); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("And",18, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // And ::= Or 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = r; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("And",18, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // And ::= empty 
            {
              Exp RESULT =null;

              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("And",18, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Or ::= Or OR Not 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpOr(r,n);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("Or",19, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Or ::= Not 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = n; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("Or",19, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparisonExpression ::= comparisonExpression LESSTHAN arithmaticExpression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 // x < y < y comparison expressions
			RESULT = new ExpLessThan(e,o); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("comparisonExpression",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparisonExpression ::= comparisonExpression LESSTHANEQUAL arithmaticExpression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
			RESULT = new ExpLessThanEqual(e,o); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("comparisonExpression",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparisonExpression ::= comparisonExpression GREATERTHAN arithmaticExpression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
			RESULT = new ExpGreaterThan(e,o); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("comparisonExpression",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparisonExpression ::= comparisonExpression GREATERTHANEQUAL arithmaticExpression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
			RESULT = new ExpGreaterThanEqual(e,o); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("comparisonExpression",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparisonExpression ::= comparisonExpression EQUAL arithmaticExpression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
			RESULT = new ExpEqual(e,o); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("comparisonExpression",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparisonExpression ::= comparisonExpression NOTEQUAL arithmaticExpression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 
			RESULT = new ExpNotEqual(e,o); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("comparisonExpression",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparisonExpression ::= arithmaticExpression 
            {
              Exp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("comparisonExpression",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparatorList ::= comparatorList LESSTHAN comparisonExpression 
            {
              ArrayList<Exp> RESULT =null;
		int cListleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int cListright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<Exp> cList = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		cList.add(new ExpLessThan(((ExpBinOp)cList.get(cList.size()-1)).getExpR(),e));
		RESULT = cList;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("comparatorList",11, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comparatorList ::= arithmaticExpression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		ArrayList<Exp> result = new ArrayList<>();result.add(e);RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("comparatorList",11, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arithmaticExpression ::= arithmaticExpression PLUS term 
            {
              Exp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 //arithmatic expressions
			RESULT = new ExpAdd(o, t); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("arithmaticExpression",20, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arithmaticExpression ::= arithmaticExpression MINUS term 
            {
              Exp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp o = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpSub(o, t); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("arithmaticExpression",20, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arithmaticExpression ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = t; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("arithmaticExpression",20, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term ::= term MUL factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 // x := f(2+1) + 1 * y
		RESULT = new ExpMul(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",23, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term ::= term DIV factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",23, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= term MOD factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",23, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",23, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= INT 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",24, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= LPAREN And RPAREN 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = a; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",24, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= funcall 
            {
              Exp RESULT =null;
		int fcallleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fcallright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpFunCall fcall = (ExpFunCall)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = fcall;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",24, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= VAR 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = new ExpVar(var);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",24, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // emptyA ::= 
            {
              ArrayList<Exp> RESULT =null;
		 ArrayList<Exp> result = new ArrayList<>(); RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("emptyA",27, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // emptyS ::= 
            {
              ArrayList<String> RESULT =null;
		 ArrayList<String> result = new ArrayList<>(); RESULT = result; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("emptyS",28, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // empty ::= 
            {
              Exp RESULT =null;

              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("empty",26, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // emptyElse ::= 
            {
              Statement RESULT =null;

              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("emptyElse",16, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ArithParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ArithParser$do_action(
    int                        CUP$ArithParser$act_num,
    java_cup.runtime.lr_parser CUP$ArithParser$parser,
    java.util.Stack            CUP$ArithParser$stack,
    int                        CUP$ArithParser$top)
    throws java.lang.Exception
    {
              return CUP$ArithParser$do_action_part00000000(
                               CUP$ArithParser$act_num,
                               CUP$ArithParser$parser,
                               CUP$ArithParser$stack,
                               CUP$ArithParser$top);
    }
}

}
